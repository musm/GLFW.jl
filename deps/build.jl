using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, "", :lib),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/SimonDanisch/GLFWBuilder/releases/download/3.2.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686) => ("$bin_prefix/glfw.v1.0.0.i686-w64-mingw32.tar.gz", "08bdec95b829c46f5aee3d98d4ba4a29eb79c0553f5ec68749d926598fa1f4b8"),
    MacOS(:x86_64) => ("$bin_prefix/glfw.v1.0.0.x86_64-apple-darwin14.tar.gz", "7b4c712c0e194c7196750b14d3178ba8ece8eeeed0fbac64f3b6e90579f0efda"),
    Windows(:x86_64) => ("$bin_prefix/glfw.v1.0.0.x86_64-w64-mingw32.tar.gz", "c03f43d7cae490c7d1e69a34e8aa2ebf5dd6acd2641b9fac976b09b873b14f76"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
